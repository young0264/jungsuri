/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.dsl.Jungsuri;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.MountainLocationEntityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MountainLocationEntity extends TableImpl<MountainLocationEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jungsuri.mountain_location_entity</code>
     */
    public static final MountainLocationEntity MOUNTAIN_LOCATION_ENTITY = new MountainLocationEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MountainLocationEntityRecord> getRecordType() {
        return MountainLocationEntityRecord.class;
    }

    /**
     * The column <code>jungsuri.mountain_location_entity.id</code>.
     */
    public final TableField<MountainLocationEntityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>jungsuri.mountain_location_entity.mountain_entity_id</code>.
     */
    public final TableField<MountainLocationEntityRecord, Long> MOUNTAIN_ENTITY_ID = createField(DSL.name("mountain_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jungsuri.mountain_location_entity.location</code>.
     */
    public final TableField<MountainLocationEntityRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255), this, "");

    private MountainLocationEntity(Name alias, Table<MountainLocationEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private MountainLocationEntity(Name alias, Table<MountainLocationEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jungsuri.mountain_location_entity</code> table
     * reference
     */
    public MountainLocationEntity(String alias) {
        this(DSL.name(alias), MOUNTAIN_LOCATION_ENTITY);
    }

    /**
     * Create an aliased <code>jungsuri.mountain_location_entity</code> table
     * reference
     */
    public MountainLocationEntity(Name alias) {
        this(alias, MOUNTAIN_LOCATION_ENTITY);
    }

    /**
     * Create a <code>jungsuri.mountain_location_entity</code> table reference
     */
    public MountainLocationEntity() {
        this(DSL.name("mountain_location_entity"), null);
    }

    public <O extends Record> MountainLocationEntity(Table<O> child, ForeignKey<O, MountainLocationEntityRecord> key) {
        super(child, key, MOUNTAIN_LOCATION_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jungsuri.JUNGSURI;
    }

    @Override
    public Identity<MountainLocationEntityRecord, Long> getIdentity() {
        return (Identity<MountainLocationEntityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MountainLocationEntityRecord> getPrimaryKey() {
        return Keys.KEY_MOUNTAIN_LOCATION_ENTITY_PRIMARY;
    }

    @Override
    public List<ForeignKey<MountainLocationEntityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKMGTIRC0XFI69GNVASI3NUSNPY);
    }

    private transient MountainEntity _mountainEntity;

    /**
     * Get the implicit join path to the <code>jungsuri.mountain_entity</code>
     * table.
     */
    public MountainEntity mountainEntity() {
        if (_mountainEntity == null)
            _mountainEntity = new MountainEntity(this, Keys.FKMGTIRC0XFI69GNVASI3NUSNPY);

        return _mountainEntity;
    }

    @Override
    public MountainLocationEntity as(String alias) {
        return new MountainLocationEntity(DSL.name(alias), this);
    }

    @Override
    public MountainLocationEntity as(Name alias) {
        return new MountainLocationEntity(alias, this);
    }

    @Override
    public MountainLocationEntity as(Table<?> alias) {
        return new MountainLocationEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MountainLocationEntity rename(String name) {
        return new MountainLocationEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MountainLocationEntity rename(Name name) {
        return new MountainLocationEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MountainLocationEntity rename(Table<?> name) {
        return new MountainLocationEntity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
