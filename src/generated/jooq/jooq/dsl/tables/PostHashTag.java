/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.dsl.Jungsuri;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.PostHashTagRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostHashTag extends TableImpl<PostHashTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jungsuri.post_hash_tag</code>
     */
    public static final PostHashTag POST_HASH_TAG = new PostHashTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostHashTagRecord> getRecordType() {
        return PostHashTagRecord.class;
    }

    /**
     * The column <code>jungsuri.post_hash_tag.id</code>.
     */
    public final TableField<PostHashTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jungsuri.post_hash_tag.post_entity_id</code>.
     */
    public final TableField<PostHashTagRecord, Long> POST_ENTITY_ID = createField(DSL.name("post_entity_id"), SQLDataType.BIGINT, this, "");

    private PostHashTag(Name alias, Table<PostHashTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostHashTag(Name alias, Table<PostHashTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jungsuri.post_hash_tag</code> table reference
     */
    public PostHashTag(String alias) {
        this(DSL.name(alias), POST_HASH_TAG);
    }

    /**
     * Create an aliased <code>jungsuri.post_hash_tag</code> table reference
     */
    public PostHashTag(Name alias) {
        this(alias, POST_HASH_TAG);
    }

    /**
     * Create a <code>jungsuri.post_hash_tag</code> table reference
     */
    public PostHashTag() {
        this(DSL.name("post_hash_tag"), null);
    }

    public <O extends Record> PostHashTag(Table<O> child, ForeignKey<O, PostHashTagRecord> key) {
        super(child, key, POST_HASH_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jungsuri.JUNGSURI;
    }

    @Override
    public UniqueKey<PostHashTagRecord> getPrimaryKey() {
        return Keys.KEY_POST_HASH_TAG_PRIMARY;
    }

    @Override
    public List<ForeignKey<PostHashTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKAKQBM4YLVJY0T94U9SDFP0YUX, Keys.FKSGM30YTFRII1A8U73KQRD4R2P);
    }

    private transient Tag _tag;
    private transient Post _post;

    /**
     * Get the implicit join path to the <code>jungsuri.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.FKAKQBM4YLVJY0T94U9SDFP0YUX);

        return _tag;
    }

    /**
     * Get the implicit join path to the <code>jungsuri.post</code> table.
     */
    public Post post() {
        if (_post == null)
            _post = new Post(this, Keys.FKSGM30YTFRII1A8U73KQRD4R2P);

        return _post;
    }

    @Override
    public PostHashTag as(String alias) {
        return new PostHashTag(DSL.name(alias), this);
    }

    @Override
    public PostHashTag as(Name alias) {
        return new PostHashTag(alias, this);
    }

    @Override
    public PostHashTag as(Table<?> alias) {
        return new PostHashTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostHashTag rename(String name) {
        return new PostHashTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostHashTag rename(Name name) {
        return new PostHashTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostHashTag rename(Table<?> name) {
        return new PostHashTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
