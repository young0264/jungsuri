/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.dsl.Jungsuri;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.PostRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jungsuri.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>jungsuri.post.id</code>.
     */
    public final TableField<PostRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jungsuri.post.author</code>.
     */
    public final TableField<PostRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.comment_count</code>.
     */
    public final TableField<PostRecord, Integer> COMMENT_COUNT = createField(DSL.name("comment_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.content</code>.
     */
    public final TableField<PostRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.created_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.image_path</code>.
     */
    public final TableField<PostRecord, String> IMAGE_PATH = createField(DSL.name("image_path"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jungsuri.post.like_count</code>.
     */
    public final TableField<PostRecord, Integer> LIKE_COUNT = createField(DSL.name("like_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.login_id</code>.
     */
    public final TableField<PostRecord, String> LOGIN_ID = createField(DSL.name("login_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.title</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.updated_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>jungsuri.post.view_count</code>.
     */
    public final TableField<PostRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jungsuri.post.account_entity_id</code>.
     */
    public final TableField<PostRecord, Long> ACCOUNT_ENTITY_ID = createField(DSL.name("account_entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jungsuri.post</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>jungsuri.post</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    /**
     * Create a <code>jungsuri.post</code> table reference
     */
    public Post() {
        this(DSL.name("post"), null);
    }

    public <O extends Record> Post(Table<O> child, ForeignKey<O, PostRecord> key) {
        super(child, key, POST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jungsuri.JUNGSURI;
    }

    @Override
    public Identity<PostRecord, Long> getIdentity() {
        return (Identity<PostRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.KEY_POST_PRIMARY;
    }

    @Override
    public List<ForeignKey<PostRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKMSSEU6OHWWE5JTPBT8K45VJCG);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>jungsuri.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FKMSSEU6OHWWE5JTPBT8K45VJCG);

        return _account;
    }

    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    @Override
    public Post as(Table<?> alias) {
        return new Post(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Table<?> name) {
        return new Post(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, Integer, String, LocalDateTime, String, Integer, String, String, LocalDateTime, Integer, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
