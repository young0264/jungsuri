/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.dsl.Jungsuri;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.PostTagRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostTag extends TableImpl<PostTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jungsuri.post_tag</code>
     */
    public static final PostTag POST_TAG = new PostTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostTagRecord> getRecordType() {
        return PostTagRecord.class;
    }

    /**
     * The column <code>jungsuri.post_tag.created_at</code>.
     */
    public final TableField<PostTagRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>jungsuri.post_tag.id</code>.
     */
    public final TableField<PostTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jungsuri.post_tag.post_entity_id</code>.
     */
    public final TableField<PostTagRecord, Long> POST_ENTITY_ID = createField(DSL.name("post_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jungsuri.post_tag.tag_id</code>.
     */
    public final TableField<PostTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT, this, "");

    private PostTag(Name alias, Table<PostTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostTag(Name alias, Table<PostTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jungsuri.post_tag</code> table reference
     */
    public PostTag(String alias) {
        this(DSL.name(alias), POST_TAG);
    }

    /**
     * Create an aliased <code>jungsuri.post_tag</code> table reference
     */
    public PostTag(Name alias) {
        this(alias, POST_TAG);
    }

    /**
     * Create a <code>jungsuri.post_tag</code> table reference
     */
    public PostTag() {
        this(DSL.name("post_tag"), null);
    }

    public <O extends Record> PostTag(Table<O> child, ForeignKey<O, PostTagRecord> key) {
        super(child, key, POST_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jungsuri.JUNGSURI;
    }

    @Override
    public Identity<PostTagRecord, Long> getIdentity() {
        return (Identity<PostTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostTagRecord> getPrimaryKey() {
        return Keys.KEY_POST_TAG_PRIMARY;
    }

    @Override
    public List<ForeignKey<PostTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKEDU8N21PDYWBAFR0KQMB76K6M, Keys.FKAC1WDCHD2PNUR3FL225OBMLG0);
    }

    private transient Post _post;
    private transient Tag _tag;

    /**
     * Get the implicit join path to the <code>jungsuri.post</code> table.
     */
    public Post post() {
        if (_post == null)
            _post = new Post(this, Keys.FKEDU8N21PDYWBAFR0KQMB76K6M);

        return _post;
    }

    /**
     * Get the implicit join path to the <code>jungsuri.tag</code> table.
     */
    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.FKAC1WDCHD2PNUR3FL225OBMLG0);

        return _tag;
    }

    @Override
    public PostTag as(String alias) {
        return new PostTag(DSL.name(alias), this);
    }

    @Override
    public PostTag as(Name alias) {
        return new PostTag(alias, this);
    }

    @Override
    public PostTag as(Table<?> alias) {
        return new PostTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostTag rename(String name) {
        return new PostTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostTag rename(Name name) {
        return new PostTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostTag rename(Table<?> name) {
        return new PostTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<LocalDateTime, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super LocalDateTime, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
