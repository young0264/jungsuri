/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.dsl.Jungsuri;
import jooq.dsl.Keys;
import jooq.dsl.enums.LikesType;
import jooq.dsl.tables.records.LikesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Likes extends TableImpl<LikesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jungsuri.likes</code>
     */
    public static final Likes LIKES = new Likes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LikesRecord> getRecordType() {
        return LikesRecord.class;
    }

    /**
     * The column <code>jungsuri.likes.id</code>.
     */
    public final TableField<LikesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jungsuri.likes.created_at</code>.
     */
    public final TableField<LikesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>jungsuri.likes.type</code>.
     */
    public final TableField<LikesRecord, LikesType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(jooq.dsl.enums.LikesType.class), this, "");

    /**
     * The column <code>jungsuri.likes.account_entity_id</code>.
     */
    public final TableField<LikesRecord, Long> ACCOUNT_ENTITY_ID = createField(DSL.name("account_entity_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jungsuri.likes.comment_entity_id</code>.
     */
    public final TableField<LikesRecord, Long> COMMENT_ENTITY_ID = createField(DSL.name("comment_entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>jungsuri.likes.post_entity_id</code>.
     */
    public final TableField<LikesRecord, Long> POST_ENTITY_ID = createField(DSL.name("post_entity_id"), SQLDataType.BIGINT, this, "");

    private Likes(Name alias, Table<LikesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Likes(Name alias, Table<LikesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jungsuri.likes</code> table reference
     */
    public Likes(String alias) {
        this(DSL.name(alias), LIKES);
    }

    /**
     * Create an aliased <code>jungsuri.likes</code> table reference
     */
    public Likes(Name alias) {
        this(alias, LIKES);
    }

    /**
     * Create a <code>jungsuri.likes</code> table reference
     */
    public Likes() {
        this(DSL.name("likes"), null);
    }

    public <O extends Record> Likes(Table<O> child, ForeignKey<O, LikesRecord> key) {
        super(child, key, LIKES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jungsuri.JUNGSURI;
    }

    @Override
    public Identity<LikesRecord, Long> getIdentity() {
        return (Identity<LikesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LikesRecord> getPrimaryKey() {
        return Keys.KEY_LIKES_PRIMARY;
    }

    @Override
    public List<ForeignKey<LikesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK7SA8YYGIVOJJDU6CAX4KXY124, Keys.FKRJMQD34N30OUFBS4UXDJ1YKA7, Keys.FKNJ0VDD299PL2JC1K3F8FQV6AQ);
    }

    private transient Account _account;
    private transient Comment _comment;
    private transient Post _post;

    /**
     * Get the implicit join path to the <code>jungsuri.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.FK7SA8YYGIVOJJDU6CAX4KXY124);

        return _account;
    }

    /**
     * Get the implicit join path to the <code>jungsuri.comment</code> table.
     */
    public Comment comment() {
        if (_comment == null)
            _comment = new Comment(this, Keys.FKRJMQD34N30OUFBS4UXDJ1YKA7);

        return _comment;
    }

    /**
     * Get the implicit join path to the <code>jungsuri.post</code> table.
     */
    public Post post() {
        if (_post == null)
            _post = new Post(this, Keys.FKNJ0VDD299PL2JC1K3F8FQV6AQ);

        return _post;
    }

    @Override
    public Likes as(String alias) {
        return new Likes(DSL.name(alias), this);
    }

    @Override
    public Likes as(Name alias) {
        return new Likes(alias, this);
    }

    @Override
    public Likes as(Table<?> alias) {
        return new Likes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(String name) {
        return new Likes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(Name name) {
        return new Likes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(Table<?> name) {
        return new Likes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, LikesType, Long, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super LocalDateTime, ? super LikesType, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super LocalDateTime, ? super LikesType, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
